                Objects and Their Internal Representation in javascript


Object in javascript allows to represent the complex data structure.
In java script objects are collection of key-value pairs. the keys are
 strings or symbols and the values can be of any data type from js 
including array, and other objects. This structure of object allows us
 to create a highly flexible and dynamic data models.

- Object comes under REFERENCE DATA TYPE which follows COPY BY REFERENCE.

Syntax of objects in js:
     
   var obj_name = { key1 : value1, key2 : value2, key3 : value3,.......};

   console.log(obj_name.key1); // output: it prints value1.

example: 
 
   var fruits = { red: 'apple', yellow: 'mango', green: 'goa'};

   console.log(fruits.yellow);  // o/p : 'mango'

Objects and properties:

    The properties of an object define the characteristics of the object.   
You access the properties of an object with a simple dot-notation.
Unassigned properties of an object are undefined.
An object property name can be any valid JavaScript string, or anything that
 can be converted to a string, including the empty string. However, any property
 name that is not a valid JavaScript identifier (for example, a property 
name that has a space or a hyphen, or that starts with a number) can only
 be accessed using the square bracket notation. This notation is also very 
useful when property names are to be dynamically determined

objectName.propertyName


Internal Representation of Objects:
	
	To understand how JavaScript objects work under the hood, it's
 essential to delve into their internal representation. JavaScript engines,
 such as V8 (used in Chrome and Node.js), employ various optimization 
techniques to manage objects efficiently
